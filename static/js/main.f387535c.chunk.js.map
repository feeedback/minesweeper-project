{"version":3,"sources":["components/FormInitGame.jsx","components/BoardGame.jsx","MinesweeperLogic.js","App.jsx","serviceWorker.js","index.js"],"names":["FormInitGame","props","handleChange","target","name","value","setState","handleSubmitStartNewGame","event","preventDefault","state","columnsCount","rowsCount","minesCount","handleStartNewGame","Number","this","maxMinesCount","className","action","onSubmit","htmlFor","type","min","max","onChange","required","React","PureComponent","mapCellValueToText","0","1","2","3","4","5","6","7","8","C","M","ME","F","FW","mapCellValueToClassName","BoardGame","closedField","gameProcessState","boardHandles","map","row","y","cell","x","isDisabled","includes","key","data-x","data-y","disabled","Component","getRandomIndex","Math","floor","random","getRandomInt","mapDefinitionToSymbol","Minesweeper","mines","Error","field","leftFlags","leftClosed","gameState","tailMines","cellX","cellY","area8","push","_getArea8","filter","mineX","mineY","forEach","cellValue","_increaseMineCounterInArea8","Array","from","length","fill","_initFieldAndFillValue","_initMines","_calculateMinesAndSetCounterValues","closedCellValue","console","log","_markAllWrongFlag","_showAllClosedMine","_markAllTailClosedFlag","_openCell","_exitLoseExplosion","_exitWinAllOpened","area8Closed","_getArea8Closed","areaX","areaY","stepToOpenCell","areaFlagged","_getArea8Flagged","areaClosed","isInteger","App","updateState","game","_handleStartNewGame","MinesweeperLogic","init","document","documentElement","style","setProperty","start","Date","now","_markFlag","markMine","_openSafeArea8","ifSafeSpaceOpenArea8","handleClick","classList","contains","ctrlKey","handleContextMenu","shiftKey","handleMouseDown","dataset","button","boardEl","createRef","onClick","onContextMenu","onMouseDown","mapGameStateToView","win","lose","playing","e","onDoubleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f387535c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FormInitGame.css';\r\n\r\nclass FormInitGame extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columnsCount: 9,\r\n            rowsCount: 9,\r\n            minesCount: 10,\r\n        };\r\n    }\r\n    \r\n    handleChange = ({ target: { name, value } }) => {\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmitStartNewGame = (event) => {\r\n        event.preventDefault();\r\n        const { columnsCount, rowsCount, minesCount } = this.state;\r\n        \r\n        const { handleStartNewGame } = this.props;\r\n        handleStartNewGame(Number(columnsCount), Number(rowsCount), Number(minesCount));\r\n    };\r\n\r\n    render() {\r\n        const { columnsCount, rowsCount, minesCount } = this.state;\r\n        const maxMinesCount = columnsCount * rowsCount - 1;\r\n\r\n        return (\r\n            <form\r\n                name=\"initGameSettings\"\r\n                className=\"formInitGameSettings\"\r\n                action=\"\"\r\n                onSubmit={this.handleSubmitStartNewGame}\r\n            >\r\n                <label htmlFor=\"x\">\r\n                    X:\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"columnsCount\"\r\n                        className=\"fieldColumnsCount\"\r\n                        min=\"2\"\r\n                        max=\"70\"\r\n                        value={columnsCount}\r\n                        onChange={this.handleChange}\r\n                        required\r\n                    />\r\n                </label>\r\n                <label htmlFor=\"y\">\r\n                    Y:\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"rowsCount\"\r\n                        className=\"fieldRowsCount\"\r\n                        min=\"2\"\r\n                        max=\"64\"\r\n                        value={rowsCount}\r\n                        onChange={this.handleChange}\r\n                        required\r\n                    />\r\n                </label>\r\n                <label htmlFor=\"mines\">\r\n                    Mines:\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"minesCount\"\r\n                        className=\"fieldMinesCount\"\r\n                        min=\"1\"\r\n                        max={maxMinesCount}\r\n                        value={minesCount}\r\n                        onChange={this.handleChange}\r\n                        required\r\n                    />\r\n                </label>\r\n                <button type=\"submit\" className=\"buttonStartGame\">\r\n                    Start game!\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormInitGame;\r\n","import React from 'react';\r\nimport './BoardGame.css';\r\n\r\nconst mapCellValueToText = {\r\n    0: '',\r\n    1: '1',\r\n    2: '2',\r\n    3: '3',\r\n    4: '4',\r\n    5: '5',\r\n    6: '6',\r\n    7: '7',\r\n    8: '8',\r\n\r\n    C: '', // '?',  closed cell\r\n    M: '💣', // mine\r\n    ME: '💣', // mine explosion\r\n    F: '🚩', //  🏴⚑🚩flagged cell\r\n    FW: '✕', // ✕✖❌wrong flagged cell\r\n};\r\nconst mapCellValueToClassName = {\r\n    0: 'empty',\r\n    1: 'digit1',\r\n    2: 'digit2',\r\n    3: 'digit3',\r\n    4: 'digit4',\r\n    5: 'digit5',\r\n    6: 'digit6',\r\n    7: 'digit7',\r\n    8: 'digit8',\r\n\r\n    M: 'mine',\r\n    ME: 'mine mineExplosion',\r\n    C: 'closed',\r\n    F: 'closed flagged',\r\n    FW: 'flaggedWrong',\r\n};\r\n\r\nclass BoardGame extends React.Component {\r\n    render() {\r\n        const { closedField, gameProcessState, boardHandles } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className=\"fieldContainer\"\r\n                {...boardHandles}\r\n            >\r\n                {closedField.map((row, y) =>\r\n                    row.map((cell, x) => {\r\n                        const isDisabled =\r\n                            gameProcessState !== 'playing' ||\r\n                            mapCellValueToClassName[cell].includes('empty');\r\n\r\n                        return (\r\n                            <button\r\n                                key={`Cell__${x}_${y}`}\r\n                                data-x={x}\r\n                                data-y={y}\r\n                                className={`Cell ${mapCellValueToClassName[cell]}`}\r\n                                disabled={isDisabled}\r\n                            >\r\n                                {mapCellValueToText[cell]}\r\n                            </button>\r\n                        );\r\n                    })\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardGame;\r\n","const getRandomInt = (min, max) => Math.floor(min + Math.random() * (max + 1 - min));\r\nconst getRandomIndex = (max) => getRandomInt(0, max - 1);\r\nconst mapDefinitionToSymbol = {\r\n    ZERO_MINES_NEARBY: 0,\r\n    ONE_MINES_NEARBY: 1,\r\n    TWO_MINES_NEARBY: 2,\r\n    THREE_MINES_NEARBY: 3,\r\n    FOUR_MINES_NEARBY: 4,\r\n    FIVE_MINES_NEARBY: 5,\r\n    SIX_MINES_NEARBY: 6,\r\n    SEVEN_MINES_NEARBY: 7,\r\n    EIGHT_MINES_NEARBY: 8,\r\n\r\n    CELL_CLOSED: 'C',\r\n    MINE: 'M',\r\n    MINE_EXPLOSION: 'ME',\r\n    FLAG: 'F',\r\n    FLAG_IN_WRONG_POSITION: 'FW',\r\n};\r\n\r\nclass Minesweeper {\r\n    constructor(x = 9, y = 9, mines = 10) {\r\n        if (mines > x * y) {\r\n            throw new Error('ERROR: mines more than cell');\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n        this.mines = mines;\r\n\r\n        this.field = [];\r\n        this.closedField = [];\r\n\r\n        this.leftFlags = mines;\r\n        this.leftClosed = x * y;\r\n\r\n        this.gameState = 'playing';\r\n    }\r\n\r\n    _initMines() {\r\n        let tailMines = this.mines;\r\n        while (tailMines !== 0) {\r\n            const x = getRandomIndex(this.x);\r\n            const y = getRandomIndex(this.y);\r\n\r\n            if (this.field[y][x] !== mapDefinitionToSymbol.MINE) {\r\n                this.field[y][x] = mapDefinitionToSymbol.MINE;\r\n                tailMines -= 1;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _getArea8(cellX, cellY) {\r\n        const area8 = [];\r\n        for (let y = cellY - 1; y <= cellY + 1; y += 1) {\r\n            for (let x = cellX - 1; x <= cellX + 1; x += 1) {\r\n                if (\r\n                    y >= 0 &&\r\n                    y < this.y &&\r\n                    x >= 0 &&\r\n                    x < this.x &&\r\n                    !(cellX === x && cellY === y)\r\n                ) {\r\n                    area8.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n        return area8;\r\n    }\r\n\r\n    _getArea8Closed(cellX, cellY, area8 = this._getArea8(cellX, cellY)) {\r\n        return area8.filter(\r\n            ({ x, y }) => this.closedField[y][x] === mapDefinitionToSymbol.CELL_CLOSED\r\n        );\r\n    }\r\n\r\n    _getArea8Flagged(cellX, cellY, area8 = this._getArea8(cellX, cellY)) {\r\n        return area8.filter(\r\n            ({ x, y }) => this.closedField[y][x] === mapDefinitionToSymbol.FLAG\r\n        );\r\n    }\r\n\r\n    _increaseMineCounterInArea8(mineX, mineY) {\r\n        this._getArea8(mineX, mineY).forEach(({ x, y }) => {\r\n            const cellValue = this.field[y][x];\r\n            if (cellValue !== mapDefinitionToSymbol.MINE) {\r\n                this.field[y][x] = cellValue + 1;\r\n            }\r\n        });\r\n    }\r\n\r\n    _calculateMinesAndSetCounterValues() {\r\n        this.field.forEach((row, y) =>\r\n            row.forEach((cell, x) => {\r\n                if (cell === mapDefinitionToSymbol.MINE) {\r\n                    this._increaseMineCounterInArea8(x, y);\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    _initFieldAndFillValue(value) {\r\n        return Array.from({ length: this.y }, () => new Array(this.x).fill(value));\r\n    }\r\n\r\n    init() {\r\n        this.closedField = this._initFieldAndFillValue(mapDefinitionToSymbol.CELL_CLOSED);\r\n        this.field = this._initFieldAndFillValue(mapDefinitionToSymbol.ZERO_MINES_NEARBY);\r\n        this._initMines();\r\n        this._calculateMinesAndSetCounterValues();\r\n        this.gameState = 'playing';\r\n    }\r\n\r\n    _markAllWrongFlag() {\r\n        this.closedField.forEach((row, y) =>\r\n            row.forEach((closedCellValue, x) => {\r\n                if (\r\n                    closedCellValue === mapDefinitionToSymbol.FLAG &&\r\n                    this.field[y][x] !== mapDefinitionToSymbol.MINE\r\n                ) {\r\n                    this.closedField[y][x] = mapDefinitionToSymbol.FLAG_IN_WRONG_POSITION;\r\n                }\r\n            })\r\n        );\r\n    }\r\n    _markAllTailClosedFlag() {\r\n        this.closedField.forEach((row, y) =>\r\n            row.forEach((closedCellValue, x) => {\r\n                if (\r\n                    closedCellValue === mapDefinitionToSymbol.CELL_CLOSED &&\r\n                    this.field[y][x] === mapDefinitionToSymbol.MINE\r\n                ) {\r\n                    this.closedField[y][x] = mapDefinitionToSymbol.FLAG;\r\n                }\r\n            })\r\n        );\r\n    }\r\n    _showAllClosedMine() {\r\n        this.closedField.forEach((row, y) =>\r\n            row.forEach((closedCellValue, x) => {\r\n                if (\r\n                    closedCellValue === mapDefinitionToSymbol.CELL_CLOSED &&\r\n                    this.field[y][x] === mapDefinitionToSymbol.MINE\r\n                ) {\r\n                    this.closedField[y][x] = mapDefinitionToSymbol.MINE;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    // _zeroOpen(zeroX, zeroY) {\r\n    //     const area8Closed = this._getArea8Closed(zeroX, zeroY);\r\n    //     for (const { x, y } of area8Closed) {\r\n    //         return this.stepToOpenCell(x, y);\r\n    //     }\r\n    //     return true;\r\n    // }\r\n    _openCell(x, y) {\r\n        this.leftClosed -= 1;\r\n        this.closedField[y][x] = this.field[y][x];\r\n        // open cell\r\n        return true;\r\n    }\r\n\r\n    _exitLoseExplosion(x, y) {\r\n        console.log('💣Explosion💣! GAME OVER');\r\n        this.closedField[y][x] = mapDefinitionToSymbol.MINE_EXPLOSION;\r\n        this._markAllWrongFlag();\r\n        this._showAllClosedMine();\r\n        this.gameState = 'lose';\r\n    }\r\n\r\n    _exitWinAllOpened() {\r\n        this._markAllTailClosedFlag();\r\n        console.log('All opened!  You win!🏆');\r\n        this.gameState = 'win';\r\n    }\r\n\r\n    stepToOpenCell(x, y) {\r\n        if (this.closedField[y][x] !== mapDefinitionToSymbol.CELL_CLOSED) {\r\n            return false;\r\n        }\r\n        // console.log('step: ', x, y);\r\n\r\n        this._openCell(x, y);\r\n\r\n        if (this.field[y][x] === mapDefinitionToSymbol.MINE) {\r\n            return this._exitLoseExplosion(x, y);\r\n        }\r\n\r\n        if (this.leftClosed === this.leftFlags) {\r\n            console.log('leftClosed', this.leftClosed, ', leftFlags ', this.leftFlags);\r\n            return this._exitWinAllOpened();\r\n        }\r\n\r\n        // if cell value - ZERO\r\n        if (this.field[y][x] === mapDefinitionToSymbol.ZERO_MINES_NEARBY) {\r\n            const area8Closed = this._getArea8Closed(x, y);\r\n            for (const { x: areaX, y: areaY } of area8Closed) {\r\n                this.stepToOpenCell(areaX, areaY);\r\n            }\r\n        }\r\n    }\r\n\r\n    markMine(x, y) {\r\n        if (\r\n            this.closedField[y][x] === mapDefinitionToSymbol.CELL_CLOSED &&\r\n            this.leftFlags\r\n        ) {\r\n            this.leftFlags -= 1;\r\n            this.leftClosed -= 1;\r\n            this.closedField[y][x] = mapDefinitionToSymbol.FLAG;\r\n            console.log('FLAG THE MINE 🚩', x, y);\r\n        } else if (this.closedField[y][x] === mapDefinitionToSymbol.FLAG) {\r\n            this.leftFlags += 1;\r\n            this.leftClosed += 1;\r\n            this.closedField[y][x] = mapDefinitionToSymbol.CELL_CLOSED;\r\n            console.log('DELETE FLAG X🚩', x, y);\r\n        }\r\n    }\r\n\r\n    ifSafeSpaceOpenArea8(x, y) {\r\n        console.log('_checkIsThisSafeCell', x, y);\r\n\r\n        const area8 = this._getArea8(x, y);\r\n        const areaFlagged = this._getArea8Flagged(x, y, area8);\r\n        const areaClosed = this._getArea8Closed(x, y, area8);\r\n        const cellValue = this.closedField[y][x];\r\n\r\n        if (\r\n            Number.isInteger(cellValue) &&\r\n            cellValue !== mapDefinitionToSymbol.ZERO_MINES_NEARBY &&\r\n            areaClosed.length &&\r\n            cellValue === areaFlagged.length\r\n        ) {\r\n            const area8Closed = this._getArea8Closed(x, y);\r\n            for (const { x: areaX, y: areaY } of area8Closed) {\r\n                this.stepToOpenCell(areaX, areaY);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Minesweeper;\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from 'react';\nimport './App.css';\nimport FormInitGame from './components/FormInitGame.jsx';\nimport BoardGame from './components/BoardGame.jsx';\nimport MinesweeperLogic from './MinesweeperLogic';\n\n// TODO: Добавить управление по стрелочкам в 4 направления, от ячейки с фокусом\n// TODO: Добавить функцию ИИ авто-прохождения или частичного (только открытие безопасных, либо только флажки)\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { gameProcessState: 'no-game', closedField: [] };\n        this.boardEl = React.createRef();\n    }\n\n    updateState = () => {\n        this.setState({\n            gameProcessState: this.game.gameState,\n            closedField: this.game.closedField,\n        });\n    };\n\n    _handleStartNewGame = (columnsCount, rowsCount, minesCount) => {\n        this.game = new MinesweeperLogic(columnsCount, rowsCount, minesCount);\n        this.game.init();\n\n        document.documentElement.style.setProperty('--x', columnsCount);\n        document.documentElement.style.setProperty('--y', rowsCount);\n\n        this.updateState();\n    };\n\n    _openCell = (x, y) => {\n        const start = Date.now();\n        console.log('start', 0);\n        this.game.stepToOpenCell(Number(x), Number(y));\n        console.log('end STEP', Date.now() - start);\n        console.log(this.game.gameState);\n\n        this.updateState();\n    };\n\n    _markFlag = (x, y) => {\n        this.game.markMine(Number(x), Number(y));\n        this.updateState();\n    };\n\n    _openSafeArea8 = (x, y) => {\n        this.game.ifSafeSpaceOpenArea8(Number(x), Number(y));\n        this.updateState();\n    };\n\n    handleClick = (event) => {\n        const { target } = event;\n        if (!target.classList.contains('Cell')) {\n            return false;\n        }\n        // Ctrl + Space for mark Flag on keyboard\n        if (event.ctrlKey) {\n            return this.handleContextMenu(event);\n        }\n        // Shift + Space for open Safe Area8 on keyboard\n        if (event.shiftKey) {\n            return this.handleMouseDown(event);\n        }\n        if (\n            target.classList.contains('closed') &&\n            !target.classList.contains('flagged')\n        ) {\n            const { x, y } = target.dataset;\n            this._openCell(x, y);\n        }\n    };\n\n    handleContextMenu = (event) => {\n        event.preventDefault();\n        const { target } = event;\n        if (!target.classList.contains('Cell')) {\n            return false;\n        }\n\n        if (target.classList.contains('closed')) {\n            const { x, y } = target.dataset;\n            this._markFlag(x, y);\n        }\n    };\n\n    handleMouseDown = ({ target, button }) => {\n        if (!target.classList.contains('Cell') || button !== 0) {\n            return false;\n        }\n        if (!target.classList.contains('closed') && !target.classList.contains('empty')) {\n            const { x, y } = target.dataset;\n            this._openSafeArea8(x, y);\n        }\n    };\n\n    render() {\n        const { gameProcessState, closedField } = this.state;\n        const boardHandles = {\n            onClick: this.handleClick,\n            onContextMenu: this.handleContextMenu,\n            onMouseDown: this.handleMouseDown,\n        };\n        const mapGameStateToView = {\n            win: (\n                <span>\n                    . <span className=\"messageWin\">All opened right! You win!🏆</span>\n                </span>\n            ),\n            lose: (\n                <span>\n                    . <span className=\"messageLose\">BOOM! Game Over! ☠️</span>\n                </span>\n            ),\n            playing: null,\n        };\n        return (\n            <div\n                className=\"App\"\n                onContextMenu={(e) => e.preventDefault()}\n                onDoubleClick={(e) => e.preventDefault()}\n            >\n                <FormInitGame handleStartNewGame={this._handleStartNewGame} />\n                {gameProcessState === 'no-game' ? null : (\n                    <div className=\"message\">\n                        <span\n                            className={`messageFlags ${\n                                this.game.leftFlags === 0 ? 'messageFlagsZero' : null\n                            }`}\n                        >\n                            Flags: {this.game.leftFlags} </span>\n                        of {this.game.mines}\n                        {mapGameStateToView[gameProcessState]}\n                    </div>\n                )}\n                {gameProcessState === 'no-game' ? null : (\n                    <BoardGame\n                        closedField={closedField}\n                        gameProcessState={gameProcessState}\n                        boardHandles={boardHandles}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}