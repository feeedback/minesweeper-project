{"version":3,"sources":["components/FormInitGame.jsx","components/BoardGame.jsx","MinesweeperLogic.js","App.jsx","serviceWorker.js","index.js"],"names":["FormInitGame","props","handleChange","target","name","value","setState","handleSubmitStartNewGame","event","preventDefault","state","columnsCount","rowsCount","minesCount","handleStartNewGame","Number","this","maxMinesCount","className","action","onSubmit","htmlFor","type","min","max","onChange","required","React","PureComponent","mapCellValueToText","0","1","2","3","4","5","6","7","8","M","ME","C","F","FW","mapCellValueToClassName","BoardGame","closedField","fieldIsDisable","boardHandles","map","row","y","cell","x","key","data-x","data-y","disabled","getRandomIndex","Math","floor","random","getRandomInt","mapDefinitionToSymbol","ZERO_MINES_NEARBY","ONE_MINES_NEARBY","TWO_MINES_NEARBY","THREE_MINES_NEARBY","FOUR_MINES_NEARBY","FIVE_MINES_NEARBY","SIX_MINES_NEARBY","SEVEN_MINES_NEARBY","EIGHT_MINES_NEARBY","CELL_CLOSED","MINE","MINE_EXPLOSION","FLAG","FLAG_IN_WRONG_POSITION","Minesweeper","constructor","mines","Error","field","leftFlags","leftClosed","gameState","_initMines","tailMines","_getArea8","cellX","cellY","area8","push","_getArea8Closed","filter","_getArea8Flagged","_increaseMineCounterInArea8","mineX","mineY","forEach","cellValue","_calculateMinesAndSetCounterValues","_initFieldAndFillValue","Array","from","length","fill","init","_markAllWrongFlag","closedCellValue","_markAllTailClosedFlag","_showAllClosedMine","_exitLoseExplosion","_exitWinAllOpened","_openCell","stepToOpenCell","area8Closed","areaX","areaY","_setFlag","_removeFlag","setOrRemoveFlag","ifSafeSpaceOpenArea8","isInteger","areaFlagged","areaClosed","getNearestNotZeroCell","currentX","currentY","notZeroCellsWithDistance","getDistance","sqrt","distance","nearestCell","sort","a","b","App","Component","super","_updateState","gameProcessState","game","_handleStartNewGame","MinesweeperLogic","document","documentElement","style","setProperty","handleClick","classList","contains","ctrlKey","handleContextMenu","shiftKey","handleMouseDown","dataset","activeCell","button","handleKeyDownArrow","mapKeyToMoveDirection","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Object","keys","includes","maxX","maxY","MoveFocusNextNoZeroCell","nextX","nextY","parentElement","children","focus","boardEl","createRef","componentDidUpdate","nextCell","querySelector","renderGameStatusMessage","mapStateToFinishToMessage","win","lose","playing","flagsClass","render","onClick","onContextMenu","onMouseDown","onKeyDown","e","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.752d5022.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FormInitGame.css';\r\n\r\nclass FormInitGame extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columnsCount: 9,\r\n            rowsCount: 9,\r\n            minesCount: 10,\r\n        };\r\n    }\r\n    \r\n    handleChange = ({ target: { name, value } }) => {\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmitStartNewGame = (event) => {\r\n        event.preventDefault();\r\n        const { columnsCount, rowsCount, minesCount } = this.state;\r\n        \r\n        const { handleStartNewGame } = this.props;\r\n        handleStartNewGame(Number(columnsCount), Number(rowsCount), Number(minesCount));\r\n    };\r\n\r\n    render() {\r\n        const { columnsCount, rowsCount, minesCount } = this.state;\r\n        const maxMinesCount = columnsCount * rowsCount - 1;\r\n\r\n        return (\r\n            <form\r\n                name=\"initGameSettings\"\r\n                className=\"formInitGameSettings\"\r\n                action=\"\"\r\n                onSubmit={this.handleSubmitStartNewGame}\r\n            >\r\n                <label htmlFor=\"x\">\r\n                    X:\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"columnsCount\"\r\n                        className=\"fieldColumnsCount\"\r\n                        min=\"2\"\r\n                        max=\"70\"\r\n                        value={columnsCount}\r\n                        onChange={this.handleChange}\r\n                        required\r\n                    />\r\n                </label>\r\n                <label htmlFor=\"y\">\r\n                    Y:\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"rowsCount\"\r\n                        className=\"fieldRowsCount\"\r\n                        min=\"2\"\r\n                        max=\"64\"\r\n                        value={rowsCount}\r\n                        onChange={this.handleChange}\r\n                        required\r\n                    />\r\n                </label>\r\n                <label htmlFor=\"mines\">\r\n                    Mines:\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"minesCount\"\r\n                        className=\"fieldMinesCount\"\r\n                        min=\"1\"\r\n                        max={maxMinesCount}\r\n                        value={minesCount}\r\n                        onChange={this.handleChange}\r\n                        required\r\n                    />\r\n                </label>\r\n                <button type=\"submit\" className=\"buttonStartGame\">\r\n                    Start game!\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormInitGame;\r\n","import React from 'react';\r\nimport './BoardGame.css';\r\n\r\nconst mapCellValueToText = {\r\n    0: '',\r\n    1: '1',\r\n    2: '2',\r\n    3: '3',\r\n    4: '4',\r\n    5: '5',\r\n    6: '6',\r\n    7: '7',\r\n    8: '8',\r\n\r\n    M: '💣', // mine\r\n    ME: '💣', // mine explosion\r\n    C: '', // '?',  closed cell\r\n    F: '🚩', //  🏴⚑🚩flagged cell\r\n    FW: '✕', // ✕✖❌wrong flagged cell\r\n};\r\nconst mapCellValueToClassName = {\r\n    0: 'empty',\r\n    1: 'digit1',\r\n    2: 'digit2',\r\n    3: 'digit3',\r\n    4: 'digit4',\r\n    5: 'digit5',\r\n    6: 'digit6',\r\n    7: 'digit7',\r\n    8: 'digit8',\r\n\r\n    M: 'mine',\r\n    ME: 'mine mineExplosion',\r\n    C: 'closed',\r\n    F: 'closed flagged',\r\n    FW: 'flaggedWrong',\r\n};\r\n\r\nconst BoardGame = ({ closedField, fieldIsDisable, boardHandles }) => {\r\n    return (\r\n        <div className=\"fieldContainer\" {...boardHandles}>\r\n            {closedField.map((row, y) =>\r\n                row.map((cell, x) => (\r\n                    <button\r\n                        key={`Cell__${x}_${y}`}\r\n                        data-x={x}\r\n                        data-y={y}\r\n                        className={`Cell ${mapCellValueToClassName[cell]}`}\r\n                        disabled={fieldIsDisable[y][x]}\r\n                    >\r\n                        {mapCellValueToText[cell]}\r\n                    </button>\r\n                ))\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardGame;\r\n","const getRandomInt = (min, max) => Math.floor(min + Math.random() * (max + 1 - min));\r\nconst getRandomIndex = (max) => getRandomInt(0, max - 1);\r\nconst mapDefinitionToSymbol = {\r\n    ZERO_MINES_NEARBY: 0,\r\n    ONE_MINES_NEARBY: 1,\r\n    TWO_MINES_NEARBY: 2,\r\n    THREE_MINES_NEARBY: 3,\r\n    FOUR_MINES_NEARBY: 4,\r\n    FIVE_MINES_NEARBY: 5,\r\n    SIX_MINES_NEARBY: 6,\r\n    SEVEN_MINES_NEARBY: 7,\r\n    EIGHT_MINES_NEARBY: 8,\r\n\r\n    CELL_CLOSED: 'C',\r\n    MINE: 'M',\r\n    MINE_EXPLOSION: 'ME',\r\n    FLAG: 'F',\r\n    FLAG_IN_WRONG_POSITION: 'FW',\r\n};\r\n\r\nclass Minesweeper {\r\n    constructor(x = 9, y = 9, mines = 10) {\r\n        if (mines > x * y) {\r\n            throw new Error('ERROR: mines more than cell');\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n        this.mines = mines;\r\n\r\n        this.field = [];\r\n        this.closedField = [];\r\n\r\n        this.leftFlags = mines;\r\n        this.leftClosed = x * y;\r\n\r\n        this.gameState = 'playing';\r\n        this.mapDefinitionToSymbol = mapDefinitionToSymbol;\r\n    }\r\n\r\n    _initMines() {\r\n        let tailMines = this.mines;\r\n        while (tailMines !== 0) {\r\n            const x = getRandomIndex(this.x);\r\n            const y = getRandomIndex(this.y);\r\n\r\n            if (this.field[y][x] !== mapDefinitionToSymbol.MINE) {\r\n                this.field[y][x] = mapDefinitionToSymbol.MINE;\r\n                tailMines -= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    _getArea8(cellX, cellY) {\r\n        const area8 = [];\r\n        for (let y = cellY - 1; y <= cellY + 1; y += 1) {\r\n            for (let x = cellX - 1; x <= cellX + 1; x += 1) {\r\n                if (\r\n                    y >= 0 &&\r\n                    y < this.y &&\r\n                    x >= 0 &&\r\n                    x < this.x &&\r\n                    !(cellX === x && cellY === y)\r\n                ) {\r\n                    area8.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n        return area8;\r\n    }\r\n\r\n    _getArea8Closed(cellX, cellY, area8 = this._getArea8(cellX, cellY)) {\r\n        return area8.filter(\r\n            ({ x, y }) => this.closedField[y][x] === mapDefinitionToSymbol.CELL_CLOSED\r\n        );\r\n    }\r\n\r\n    _getArea8Flagged(cellX, cellY, area8 = this._getArea8(cellX, cellY)) {\r\n        return area8.filter(\r\n            ({ x, y }) => this.closedField[y][x] === mapDefinitionToSymbol.FLAG\r\n        );\r\n    }\r\n\r\n    _increaseMineCounterInArea8(mineX, mineY) {\r\n        this._getArea8(mineX, mineY).forEach(({ x, y }) => {\r\n            const cellValue = this.field[y][x];\r\n            if (cellValue !== mapDefinitionToSymbol.MINE) {\r\n                this.field[y][x] = cellValue + 1;\r\n            }\r\n        });\r\n    }\r\n\r\n    _calculateMinesAndSetCounterValues() {\r\n        this.field.forEach((row, y) =>\r\n            row.forEach((cell, x) => {\r\n                if (cell === mapDefinitionToSymbol.MINE) {\r\n                    this._increaseMineCounterInArea8(x, y);\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    _initFieldAndFillValue(value) {\r\n        return Array.from({ length: this.y }, () => new Array(this.x).fill(value));\r\n    }\r\n\r\n    init() {\r\n        this.closedField = this._initFieldAndFillValue(mapDefinitionToSymbol.CELL_CLOSED);\r\n        this.field = this._initFieldAndFillValue(mapDefinitionToSymbol.ZERO_MINES_NEARBY);\r\n        this._initMines();\r\n        this._calculateMinesAndSetCounterValues();\r\n        this.gameState = 'playing';\r\n    }\r\n\r\n    _markAllWrongFlag() {\r\n        this.closedField.forEach((row, y) =>\r\n            row.forEach((closedCellValue, x) => {\r\n                if (\r\n                    closedCellValue === mapDefinitionToSymbol.FLAG &&\r\n                    this.field[y][x] !== mapDefinitionToSymbol.MINE\r\n                ) {\r\n                    this.closedField[y][x] = mapDefinitionToSymbol.FLAG_IN_WRONG_POSITION;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    _markAllTailClosedFlag() {\r\n        this.closedField.forEach((row, y) =>\r\n            row.forEach((closedCellValue, x) => {\r\n                if (\r\n                    closedCellValue === mapDefinitionToSymbol.CELL_CLOSED &&\r\n                    this.field[y][x] === mapDefinitionToSymbol.MINE\r\n                ) {\r\n                    this.closedField[y][x] = mapDefinitionToSymbol.FLAG;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    _showAllClosedMine() {\r\n        this.closedField.forEach((row, y) =>\r\n            row.forEach((closedCellValue, x) => {\r\n                if (\r\n                    closedCellValue === mapDefinitionToSymbol.CELL_CLOSED &&\r\n                    this.field[y][x] === mapDefinitionToSymbol.MINE\r\n                ) {\r\n                    this.closedField[y][x] = mapDefinitionToSymbol.MINE;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    _exitLoseExplosion(x, y) {\r\n        // console.log('💣Explosion💣! GAME OVER');\r\n        this.closedField[y][x] = mapDefinitionToSymbol.MINE_EXPLOSION;\r\n        this._markAllWrongFlag();\r\n        this._showAllClosedMine();\r\n        this.gameState = 'lose';\r\n    }\r\n\r\n    _exitWinAllOpened() {\r\n        this._markAllTailClosedFlag();\r\n        // console.log('All opened!  You win!🏆');\r\n        this.gameState = 'win';\r\n    }\r\n\r\n    _openCell(x, y) {\r\n        this.leftClosed -= 1;\r\n        this.closedField[y][x] = this.field[y][x];\r\n    }\r\n\r\n    stepToOpenCell(x, y) {\r\n        if (this.closedField[y][x] !== mapDefinitionToSymbol.CELL_CLOSED) {\r\n            return;\r\n        }\r\n\r\n        this._openCell(x, y);\r\n\r\n        if (this.field[y][x] === mapDefinitionToSymbol.MINE) {\r\n            return this._exitLoseExplosion(x, y);\r\n        }\r\n\r\n        // остались закрытыми только мины\r\n        if (this.leftClosed === this.leftFlags) {\r\n            return this._exitWinAllOpened();\r\n        }\r\n\r\n        if (this.field[y][x] === mapDefinitionToSymbol.ZERO_MINES_NEARBY) {\r\n            const area8Closed = this._getArea8Closed(x, y);\r\n            for (const { x: areaX, y: areaY } of area8Closed) {\r\n                this.stepToOpenCell(areaX, areaY);\r\n            }\r\n        }\r\n    }\r\n\r\n    _setFlag(x, y) {\r\n        this.leftFlags -= 1;\r\n        this.leftClosed -= 1;\r\n        this.closedField[y][x] = mapDefinitionToSymbol.FLAG;\r\n        // console.log('FLAG THE MINE 🚩', x, y);\r\n    }\r\n\r\n    _removeFlag(x, y) {\r\n        this.leftFlags += 1;\r\n        this.leftClosed += 1;\r\n        this.closedField[y][x] = mapDefinitionToSymbol.CELL_CLOSED;\r\n        // console.log('DELETE FLAG X🚩', x, y);\r\n    }\r\n\r\n    setOrRemoveFlag(x, y) {\r\n        if (\r\n            this.closedField[y][x] === mapDefinitionToSymbol.CELL_CLOSED &&\r\n            this.leftFlags > 0\r\n        ) {\r\n            this._setFlag(x, y);\r\n        } else if (this.closedField[y][x] === mapDefinitionToSymbol.FLAG) {\r\n            this._removeFlag(x, y);\r\n        }\r\n    }\r\n\r\n    ifSafeSpaceOpenArea8(x, y) {\r\n        // console.log('_checkIsThisSafeCell', x, y);\r\n        const cellValue = this.closedField[y][x];\r\n        if (\r\n            !Number.isInteger(cellValue) ||\r\n            cellValue === mapDefinitionToSymbol.ZERO_MINES_NEARBY\r\n        ) {\r\n            return;\r\n        }\r\n        const area8 = this._getArea8(x, y);\r\n        const areaFlagged = this._getArea8Flagged(x, y, area8);\r\n        const areaClosed = this._getArea8Closed(x, y, area8);\r\n\r\n        if (cellValue === areaFlagged.length) {\r\n            for (const { x: areaX, y: areaY } of areaClosed) {\r\n                this.stepToOpenCell(areaX, areaY);\r\n            }\r\n        }\r\n    }\r\n    getNearestNotZeroCell(currentX, currentY) {\r\n        if (\r\n            this.closedField[currentY][currentX] !==\r\n            mapDefinitionToSymbol.ZERO_MINES_NEARBY\r\n        ) {\r\n            return null;\r\n        }\r\n\r\n        const notZeroCellsWithDistance = [];\r\n        const getDistance = (x, y) =>\r\n            Math.sqrt((x - currentX) ** 2 + (y - currentY) ** 2);\r\n\r\n        this.closedField.forEach((row, y) =>\r\n            row.forEach((cellValue, x) => {\r\n                if (cellValue !== mapDefinitionToSymbol.ZERO_MINES_NEARBY) {\r\n                    notZeroCellsWithDistance.push({ x, y, distance: getDistance(x, y) });\r\n                }\r\n            })\r\n        );\r\n        if (notZeroCellsWithDistance.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const [nearestCell] = notZeroCellsWithDistance.sort(\r\n            (a, b) => a.distance - b.distance\r\n        );\r\n        return nearestCell;\r\n    }\r\n}\r\n\r\nexport default Minesweeper;\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from 'react';\nimport './App.css';\nimport FormInitGame from './components/FormInitGame.jsx';\nimport BoardGame from './components/BoardGame.jsx';\nimport MinesweeperLogic from './MinesweeperLogic';\n// TODO: Добавить функцию ИИ авто-прохождения или частичного (только открытие безопасных, либо только флажки)\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameProcessState: 'no-game',\n            closedField: [],\n            activeCell: { x: 0, y: 0 },\n        };\n        this.boardEl = React.createRef();\n    }\n\n    _updateState = () => {\n        this.setState({\n            gameProcessState: this.game.gameState,\n            closedField: this.game.closedField,\n        });\n    };\n\n    _handleStartNewGame = (columnsCount, rowsCount, minesCount) => {\n        this.game = new MinesweeperLogic(columnsCount, rowsCount, minesCount);\n        this.game.init();\n\n        document.documentElement.style.setProperty('--x', columnsCount);\n        document.documentElement.style.setProperty('--y', rowsCount);\n\n        this._updateState();\n    };\n\n    handleClick = (event) => {\n        const { target } = event;\n\n        if (!target.classList.contains('Cell')) {\n            return false;\n        }\n        // Ctrl + Space for mark Flag on keyboard\n        if (event.ctrlKey) {\n            return this.handleContextMenu(event);\n        }\n        // Shift + Space for open Safe Area8 on keyboard\n        if (event.shiftKey) {\n            return this.handleMouseDown(event);\n        }\n\n        const { x, y } = target.dataset;\n        this.game.stepToOpenCell(Number(x), Number(y));\n        this.setState({\n            gameProcessState: this.game.gameState,\n            closedField: this.game.closedField,\n            activeCell: { x, y },\n        });\n    };\n\n    componentDidUpdate() {\n        // focus next not disabled cell for navigation (because disabled button lost focus)\n        const {\n            activeCell: { x, y },\n        } = this.state;\n\n        const nextCell = this.game.getNearestNotZeroCell(x, y);\n        if (nextCell === null) {\n            document\n                .querySelector('.fieldContainer')\n                .children[x + y * this.game.x].focus();\n            return;\n        }\n        document\n            .querySelector('.fieldContainer')\n            .children[nextCell.x + nextCell.y * this.game.x].focus();\n    }\n\n    handleContextMenu = (event) => {\n        event.preventDefault();\n        const { target } = event;\n\n        if (!target.classList.contains('Cell')) {\n            return false;\n        }\n\n        const { x, y } = target.dataset;\n        this.game.setOrRemoveFlag(Number(x), Number(y));\n        this.setState({\n            gameProcessState: this.game.gameState,\n            closedField: this.game.closedField,\n            activeCell: { x, y },\n        });\n    };\n\n    handleMouseDown = ({ target, button }) => {\n        if (!target.classList.contains('Cell') || button !== 0) {\n            return;\n        }\n\n        const { x, y } = target.dataset;\n        this.game.ifSafeSpaceOpenArea8(Number(x), Number(y));\n        this._updateState();\n    };\n\n    handleKeyDownArrow = ({ target, key }) => {\n        const mapKeyToMoveDirection = {\n            ArrowUp: (x, y) => [x, y - 1],\n            ArrowDown: (x, y) => [x, y + 1],\n            ArrowLeft: (x, y) => [x - 1, y],\n            ArrowRight: (x, y) => [x + 1, y],\n        };\n        if (!Object.keys(mapKeyToMoveDirection).includes(key)) {\n            return;\n        }\n\n        const { x: currentX, y: currentY } = target.dataset;\n        const { x: maxX, y: maxY } = this.game;\n        const { closedField } = this.state;\n\n        const MoveFocusNextNoZeroCell = (x, y) => {\n            const [nextX, nextY] = mapKeyToMoveDirection[key](x, y);\n            if (nextX < 0 || nextX >= maxX || nextY < 0 || nextY >= maxY) {\n                return;\n            }\n            if (\n                closedField[nextY][nextX] ===\n                this.game.mapDefinitionToSymbol.ZERO_MINES_NEARBY\n            ) {\n                return MoveFocusNextNoZeroCell(nextX, nextY);\n            }\n            const nextCell = target.parentElement.children[nextX + nextY * maxX];\n            nextCell.focus();\n        };\n        MoveFocusNextNoZeroCell(Number(currentX), Number(currentY));\n    };\n\n    renderGameStatusMessage() {\n        const mapStateToFinishToMessage = {\n            win: <span className=\"messageWin\">All opened right! You win!🏆</span>,\n            lose: <span className=\"messageLose\">BOOM! Game Over! ☠️</span>,\n            playing: null,\n        };\n        const { gameProcessState } = this.state;\n        const flagsClass =\n            this.game.leftFlags === 0 ? 'messageFlags messageFlagsZero' : 'messageFlags';\n\n        return (\n            <div className=\"message\">\n                <span className={flagsClass}>Flags: {this.game.leftFlags} </span>\n                of {this.game.mines}. {mapStateToFinishToMessage[gameProcessState]}\n            </div>\n        );\n    }\n\n    render() {\n        const { gameProcessState, closedField } = this.state;\n        const boardHandles = {\n            onClick: this.handleClick,\n            onContextMenu: this.handleContextMenu,\n            onMouseDown: this.handleMouseDown,\n            onKeyDown: this.handleKeyDownArrow,\n        };\n\n        const fieldIsDisable = closedField.map((row) =>\n            row.map(\n                (cell) =>\n                    gameProcessState !== 'playing' ||\n                    cell === this.game.mapDefinitionToSymbol.ZERO_MINES_NEARBY\n            )\n        );\n\n        return (\n            <div className=\"App\" onContextMenu={(e) => e.preventDefault()}>\n                <FormInitGame handleStartNewGame={this._handleStartNewGame} />\n\n                {gameProcessState === 'no-game' ? null : (\n                    <>\n                        {this.renderGameStatusMessage()}\n                        <BoardGame\n                            closedField={closedField}\n                            fieldIsDisable={fieldIsDisable}\n                            boardHandles={boardHandles}\n                        />\n                    </>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}